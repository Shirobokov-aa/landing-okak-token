const { Connection, Keypair, PublicKey, clusterApiUrl } = require("@solana/web3.js");
const { getAssociatedTokenAddress, createTransferInstruction, createAssociatedTokenAccountInstruction } = require("@solana/spl-token");
const fs = require("fs");
const readline = require("readline");

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const MINT_ADDRESS = "FTpcEYLwQYJmQFQYiLKpz6fKH5FXS2xxxtWAEJVn27Jm";
const KEYPAIR_PATH = "../id.json";
const NETWORK = "mainnet-beta";

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

function question(prompt) {
    return new Promise((resolve) => {
        rl.question(prompt, resolve);
    });
}

async function sendTokensCLI() {
    try {
        console.log("üê± OkakCat Token Sender CLI");
        console.log("============================\n");

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á
        console.log("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–∞...");
        const keypairData = JSON.parse(fs.readFileSync(KEYPAIR_PATH, "utf8"));
        const keypair = Keypair.fromSecretKey(new Uint8Array(keypairData));
        console.log("‚úÖ –ö–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω:", keypair.publicKey.toString());

        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Solana
        console.log("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Solana...");
        const connection = new Connection(clusterApiUrl(NETWORK), "confirmed");

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const walletAddress = await question("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ");
        const amountStr = await question("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: ");
        const message = await question("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): ");

        const amount = parseFloat(amountStr);
        if (isNaN(amount) || amount <= 0) {
            throw new Error("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤");
        }

        console.log("\nüöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤...");
        console.log(`üì§ –ö–æ–º—É: ${walletAddress}`);
        console.log(`üí∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${amount} OKAK`);
        if (message) console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${message}`);

        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        const confirm = await question("\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É (y/n): ");
        if (confirm.toLowerCase() !== 'y') {
            console.log("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞");
            return;
        }

        const mint = new PublicKey(MINT_ADDRESS);
        const receiver = new PublicKey(walletAddress);

        // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω-–∞–∫–∫–∞—É–Ω—Ç–æ–≤
        const senderTokenAccount = await getAssociatedTokenAddress(mint, keypair.publicKey);
        const receiverTokenAccount = await getAssociatedTokenAddress(mint, receiver);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        const senderBalance = await connection.getTokenAccountBalance(senderTokenAccount);
        const requiredAmount = amount * Math.pow(10, 9);

        if (senderBalance.value.uiAmount < amount) {
            throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤! –£ –≤–∞—Å: ${senderBalance.value.uiAmount}, –Ω—É–∂–Ω–æ: ${amount}`);
        }

        // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        const { Transaction } = require("@solana/web3.js");
        const transaction = new Transaction();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–∫–µ–Ω-–∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        const receiverAccountInfo = await connection.getAccountInfo(receiverTokenAccount);

        if (!receiverAccountInfo) {
            console.log("üìù –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω-–∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è...");
            const createAccountIx = createAssociatedTokenAccountInstruction(
                keypair.publicKey,
                receiverTokenAccount,
                receiver,
                mint
            );
            transaction.add(createAccountIx);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
        const transferIx = createTransferInstruction(
            senderTokenAccount,
            receiverTokenAccount,
            keypair.publicKey,
            requiredAmount
        );
        transaction.add(transferIx);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        console.log("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...");
        const signature = await connection.sendTransaction(transaction, [keypair]);

        console.log("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...");
        await connection.confirmTransaction(signature, "confirmed");

        console.log("\nüéâ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!");
        console.log(`‚úÖ –ü–æ–¥–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${signature}`);
        console.log(`üîó Solscan: https://solscan.io/tx/${signature}`);

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞:", error.message);
    } finally {
        rl.close();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
sendTokensCLI();
