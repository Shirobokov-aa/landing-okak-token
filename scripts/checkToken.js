const { Connection, PublicKey } = require("@solana/web3.js");
const { getMint, TOKEN_PROGRAM_ID } = require("@solana/spl-token");

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –Ω–æ–¥–µ
const connection = new Connection("http://127.0.0.1:8899", "confirmed");

// –†–∞–∑–ª–∏—á–Ω—ã–µ Program ID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
const PROGRAM_IDS = [
  { name: "TOKEN_PROGRAM_ID", id: TOKEN_PROGRAM_ID },
  { name: "TOKEN_2022_PROGRAM_ID (–∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏)", id: new PublicKey("TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb") },
  { name: "–î—Ä—É–≥–æ–π –≤–æ–∑–º–æ–∂–Ω—ã–π TOKEN_2022", id: new PublicKey("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA") }
];

const tokenMint = new PublicKey("8F3qWVD3mVS98FmZp1Ns7rgH9QLgRF3qmRPz8XWNk2SY");

async function checkToken() {
  try {
    console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω:", tokenMint.toString());
    console.log("=" * 50);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const version = await connection.getVersion();
    console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏ —É—Å–ø–µ—à–Ω–æ. –í–µ—Ä—Å–∏—è: ${version["solana-core"]}`);

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
    console.log("\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ:");
    const accountInfo = await connection.getAccountInfo(tokenMint);

    if (!accountInfo) {
      console.log("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Ç–∏!");
      return;
    }

    console.log(`‚úÖ –ê–∫–∫–∞—É–Ω—Ç –Ω–∞–π–¥–µ–Ω!`);
    console.log(`   Owner: ${accountInfo.owner.toString()}`);
    console.log(`   Lamports: ${accountInfo.lamports}`);
    console.log(`   Data length: ${accountInfo.data.length}`);
    console.log(`   Executable: ${accountInfo.executable}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∫–∞–∫–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö —Ç–æ–∫–µ–Ω –º–æ–∂–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
    console.log("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö:");

    for (const program of PROGRAM_IDS) {
      try {
        console.log(`\n--- –ü—Ä–æ–≤–µ—Ä—è–µ–º ${program.name} ---`);
        console.log(`Program ID: ${program.id.toString()}`);

        const mintInfo = await getMint(
          connection,
          tokenMint,
          "confirmed",
          program.id
        );

        console.log(`‚úÖ –ù–ê–ô–î–ï–ù –≤ ${program.name}!`);
        console.log(`   Mint Authority: ${mintInfo.mintAuthority}`);
        console.log(`   Supply: ${mintInfo.supply}`);
        console.log(`   Decimals: ${mintInfo.decimals}`);
        console.log(`   Freeze Authority: ${mintInfo.freezeAuthority}`);
        console.log(`   Is Initialized: ${mintInfo.isInitialized}`);

        // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω, —ç—Ç–æ –Ω–∞—à Program ID
        return program.id;

      } catch (error) {
        console.log(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –≤ ${program.name}`);
        console.log(`   –û—à–∏–±–∫–∞: ${error.message}`);
      }
    }

    console.log("\n‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–π –∏–∑ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º!");

  } catch (error) {
    console.error("‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:", error);
  }
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º—ã
async function checkProgramAccounts() {
  console.log("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã TOKEN_2022 –ø—Ä–æ–≥—Ä–∞–º–º—ã:");

  const programId = new PublicKey("TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb");

  try {
    const accounts = await connection.getProgramAccounts(programId);
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${accounts.length} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ`);

    accounts.forEach((account, index) => {
      console.log(`${index + 1}. ${account.pubkey.toString()}`);
      if (account.pubkey.toString() === tokenMint.toString()) {
        console.log("   ‚≠ê –≠—Ç–æ –Ω–∞—à —Ç–æ–∫–µ–Ω!");
      }
    });

  } catch (error) {
    console.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º—ã:", error.message);
  }
}

async function main() {
  await checkToken();
  await checkProgramAccounts();
}

main();
