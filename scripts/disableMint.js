const { Connection, Keypair, PublicKey, clusterApiUrl } = require("@solana/web3.js");
const {
    setAuthority,
    AuthorityType,
    getMint,
    TOKEN_2022_PROGRAM_ID
} = require("@solana/spl-token");

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –Ω–æ–¥–µ
const connection = new Connection("http://127.0.0.1:8899", "confirmed");

// –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π Program ID –¥–ª—è TOKEN_2022
const CORRECT_TOKEN_2022_PROGRAM_ID = new PublicKey("TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb");

// –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á (64 –±–∞–π—Ç–∞)
const payer = Keypair.fromSecretKey(
  Uint8Array.from([
    178,25,165,33,161,66,112,101,65,253,179,29,185,144,27,246,
    106,41,149,31,247,49,60,244,80,243,71,98,52,143,181,170,
    77,84,31,173,84,67,141,188,18,116,147,124,238,45,140,10,
    159,102,125,88,201,150,65,221,40,127,152,29,225,14,37,42
  ])
);

const tokenMint = new PublicKey("2sknFoLgVYwXrE8ACKEQLyxEuFWgvky9hb8izDpvayBh");

async function disableTokenMint() {
  try {
    console.log("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏...");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const version = await connection.getVersion();
    console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏ —É—Å–ø–µ—à–Ω–æ. –í–µ—Ä—Å–∏—è: ${version["solana-core"]}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞
    const balance = await connection.getBalance(payer.publicKey);
    console.log(`üí∞ –ë–∞–ª–∞–Ω—Å –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞: ${balance / 1000000000} SOL`);

    if (balance === 0) {
      console.log("‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: –£ –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞ –Ω–µ—Ç SOL –¥–ª—è –æ–ø–ª–∞—Ç—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!");
      return;
    }

    console.log("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...");

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º TOKEN_2022_PROGRAM_ID
    let mintInfo;
    let programId = CORRECT_TOKEN_2022_PROGRAM_ID;

    try {
      mintInfo = await getMint(
        connection,
        tokenMint,
        "confirmed",
        CORRECT_TOKEN_2022_PROGRAM_ID
      );
      console.log("‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ TOKEN_2022_PROGRAM");
    } catch (error) {
      console.log("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ TOKEN_2022_PROGRAM, –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π TOKEN_PROGRAM...");

      // –ü–æ–ø—Ä–æ–±—É–µ–º —Å –æ–±—ã—á–Ω—ã–º TOKEN_PROGRAM_ID
      const { TOKEN_PROGRAM_ID } = require("@solana/spl-token");
      try {
        mintInfo = await getMint(
          connection,
          tokenMint,
          "confirmed",
          TOKEN_PROGRAM_ID
        );
        programId = TOKEN_PROGRAM_ID;
        console.log("‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ –æ–±—ã—á–Ω–æ–º TOKEN_PROGRAM");
      } catch (error2) {
        console.log("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–π –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º");
        console.log("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:");
        console.log("1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞");
        console.log("2. –†–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –ª–æ–∫–∞–ª—å–Ω–∞—è –Ω–æ–¥–∞ Solana");
        console.log("3. –°–æ–∑–¥–∞–Ω –ª–∏ —Ç–æ–∫–µ–Ω –≤ —ç—Ç–æ–π —Å–µ—Ç–∏");
        return;
      }
    }

    console.log(`–¢–µ–∫—É—â–∏–π mint authority: ${mintInfo.mintAuthority}`);
    console.log(`–¢–µ–∫—É—â–∏–π supply: ${mintInfo.supply}`);
    console.log(`Decimals: ${mintInfo.decimals}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ payer —è–≤–ª—è–µ—Ç—Å—è mint authority
    if (mintInfo.mintAuthority?.toString() !== payer.publicKey.toString()) {
      console.log("‚ùå –û—à–∏–±–∫–∞: –ü–ª–∞—Ç–µ–ª—å—â–∏–∫ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è mint authority!");
      console.log(`–û–∂–∏–¥–∞–µ—Ç—Å—è: ${payer.publicKey.toString()}`);
      console.log(`–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π: ${mintInfo.mintAuthority?.toString()}`);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω –ª–∏ —É–∂–µ –º–∏–Ω—Ç
    if (mintInfo.mintAuthority === null) {
      console.log("‚ÑπÔ∏è  –ú–∏–Ω—Ç —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω!");
      return;
    }

    console.log("–û—Ç–∫–ª—é—á–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º–∏–Ω—Ç–∞...");

    // –û—Ç–∫–ª—é—á–∞–µ–º –º–∏–Ω—Ç, —É—Å—Ç–∞–Ω–æ–≤–∏–≤ authority –≤ null
    const transactionSignature = await setAuthority(
      connection,
      payer,
      tokenMint,
      payer.publicKey, // –¢–µ–∫—É—â–∏–π mint authority
      AuthorityType.MintTokens,
      null, // –ù–æ–≤—ã–π authority (null = –æ—Ç–∫–ª—é—á–∏—Ç—å)
      [],
      undefined,
      programId
    );

    console.log(`‚úÖ –ú–∏–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω! –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${transactionSignature}`);
    console.log(`–ü—Ä–æ–≤–µ—Ä–∏—Ç—å: https://explorer.solana.com/tx/${transactionSignature}?cluster=custom`);

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error);
    console.log("\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:");
    console.log("1. –¢–æ–∫–µ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–µ—Ç–∏");
    console.log("2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞");
    console.log("3. –õ–æ–∫–∞–ª—å–Ω–∞—è –Ω–æ–¥–∞ Solana –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞");
    console.log("4. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ SOL –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏");
  }
}

disableTokenMint();
